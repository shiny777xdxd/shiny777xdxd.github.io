from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.web_app_info import WebAppInfo
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from db import Database
import configur
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio

# logging.basicConfig(level=logging.INFO)

bot = Bot(token=configur.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
id_adm = "5360547434"

db = Database("database.db")

# p2p = QiwiP2P(auth_key=configur.QIWI_TOK)

#
# def is_number(_str):
#     try:
#         int(_str)
#         return True
#     except ValueError:
#         return False
#

# main = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
# main.add("–ö–∞—Ç–∞–ª–æ–≥").add("–ü—Ä–æ—Ñ–∏–ª—å").add("–ê–¥–º–∏–Ω")
#
# privates = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
# privates.add("–ü–æ–º–æ—â—å").add("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ").add("–î–µ–∞–Ω–æ–Ω").add("–°—Ö–µ–º–∫–∏")
#
admin = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
admin.add("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä").add("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä").add("–†–∞—Å—Å—ã–ª–∫–∞")


oplata = InlineKeyboardMarkup(row_width=2)
oplata.add(InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="buy"), InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))








@dp.message_handler(commands=["start"])
async def start(message: types.message):
    user = message.from_user.first_name
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –º–∞–π–Ω–µ—Ä"))
    markup.add(types.KeyboardButton("–ü–æ–º–æ—â—å"))
    markup.add(types.KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", web_app=WebAppInfo(url="https://shiny777xdxd.github.io/sneak.html")))
    await bot.send_message(message.from_user.id, f'‚ù§Ô∏è‚Äçüî•–ü—Ä–∏–≤–µ—Ç, {user}‚ù§Ô∏è‚Äçüî•', reply_markup=markup)
    # if message.chat.type == "private":
    #     if not db.user_exists(message.from_user.id):
    #         db.add_user(message.from_user.id)
    # await bot.send_message(message.from_user.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í–∞—à —Å—á–µ—Ç: {db.user_money(message.from_user.id)} —Ä—É–±", reply_markup=oplata)



@dp.message_handler(text="–ü–æ–º–æ—â—å")
async def hack(message: types.message):
    markup1 = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup1.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –º–∞–π–Ω–µ—Ä"))
    markup1.add(types.KeyboardButton("–ü–æ–º–æ—â—å"))
    markup1.add(types.KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", web_app=WebAppInfo(url="https://shiny777xdxd.github.io/sneak.html")))
    await message.answer("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: https://t.me/sneak_supprot", reply_markup=markup1)





nagrus = InlineKeyboardMarkup(row_width=4)
nagrus.add(InlineKeyboardButton(text="20%", callback_data="proc"),
           InlineKeyboardButton(text="40%", callback_data="proc"),
           InlineKeyboardButton(text="40%", callback_data="proc"),
           InlineKeyboardButton(text="50%", callback_data="proc"),
           InlineKeyboardButton(text="60%", callback_data="proc"),
           InlineKeyboardButton(text="70%", callback_data="proc"),
           InlineKeyboardButton(text="80%", callback_data="proc"),
           InlineKeyboardButton(text="90%", callback_data="proc"))



@dp.message_handler(text="–°–æ–∑–¥–∞—Ç—å –º–∞–π–Ω–µ—Ä")
async def proc(message: types.message):
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU (–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä), –∫–æ–≥–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Ç 0 –¥–æ 100%. (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 40%) :', reply_markup=nagrus)





nagrus2 = InlineKeyboardMarkup(row_width=4)
nagrus2.add(InlineKeyboardButton(text="20%", callback_data="procc"),
           InlineKeyboardButton(text="40%", callback_data="procc"),
           InlineKeyboardButton(text="40%", callback_data="procc"),
           InlineKeyboardButton(text="50%", callback_data="procc"),
           InlineKeyboardButton(text="60%", callback_data="procc"),
           InlineKeyboardButton(text="70%", callback_data="procc"),
           InlineKeyboardButton(text="80%", callback_data="procc"),
           InlineKeyboardButton(text="90%", callback_data="procc"))




@dp.callback_query_handler(lambda query: query.data == 'proc')
async def proc(query: types.CallbackQuery):
    await bot.send_message(chat_id=query.message.chat.id, text='–ü—Ä–∏–Ω—è—Ç–æ                                                                            –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU (–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä), –∫–æ–≥–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç. –æ—Ç 0 –¥–æ 100%', reply_markup=nagrus2)






nagrus3 = InlineKeyboardMarkup(row_width=4)
nagrus3.add(InlineKeyboardButton(text="20%", callback_data="proc2"),
           InlineKeyboardButton(text="40%", callback_data="proc2"),
           InlineKeyboardButton(text="40%", callback_data="proc2"),
           InlineKeyboardButton(text="50%", callback_data="proc2"),
           InlineKeyboardButton(text="60%", callback_data="proc2"),
           InlineKeyboardButton(text="70%", callback_data="proc2"),
           InlineKeyboardButton(text="80%", callback_data="proc2"),
           InlineKeyboardButton(text="90%", callback_data="proc2"))




@dp.callback_query_handler(lambda query: query.data == 'procc')
async def proc(query: types.CallbackQuery):
    await bot.send_message(chat_id=query.message.chat.id, text='–ü—Ä–∏–Ω—è—Ç–æ                                                                            –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ GPU (–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞), –∫–æ–≥–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Ç 0 –¥–æ 100%. (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 30%)', reply_markup=nagrus3)





nagrus4 = InlineKeyboardMarkup(row_width=4)
nagrus4.add(InlineKeyboardButton(text="20%", callback_data="proc3"),
           InlineKeyboardButton(text="40%", callback_data="proc3"),
           InlineKeyboardButton(text="40%", callback_data="proc3"),
           InlineKeyboardButton(text="50%", callback_data="proc3"),
           InlineKeyboardButton(text="60%", callback_data="proc3"),
           InlineKeyboardButton(text="70%", callback_data="proc3"),
           InlineKeyboardButton(text="80%", callback_data="proc3"),
           InlineKeyboardButton(text="90%", callback_data="proc3"))




@dp.callback_query_handler(lambda query: query.data == 'proc2')
async def proc(query: types.CallbackQuery):
    await bot.send_message(chat_id=query.message.chat.id, text='–ü—Ä–∏–Ω—è—Ç–æ                                                                            –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ GPU (–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞), –∫–æ–≥–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç. –æ—Ç 0 –¥–æ 100%. (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 50-70%)', reply_markup=nagrus4)




@dp.callback_query_handler(lambda query: query.data == 'proc3')
async def proc(query: types.CallbackQuery):
    await bot.send_message(chat_id=query.message.chat.id, text='–ó–∞–ø—É—Å–∫–∞—Ç—å –º–∞–π–Ω–µ—Ä —Å—Ä–∞–∑—É –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞? (—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ä–∞–∑—É)', reply_markup=zapus)


zapus = InlineKeyboardMarkup(row_width=4)
zapus.add(InlineKeyboardButton(text="–°—Ä–∞–∑—É", callback_data="zap"),
           InlineKeyboardButton(text="–ü–æ—Å–ª–µ", callback_data="zap"))


@dp.callback_query_handler(lambda query: query.data == 'zap')
async def proc(query: types.CallbackQuery):
    await bot.send_message(chat_id=query.message.chat.id, text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ XMR(–º–æ–Ω–µ—Ä–æ)                                                                           –ö–æ–≥–¥–∞ –ø—Ä–∏—à–ª–µ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–≥–æ—Ç–æ–≤–æ ‚úÖ", –µ—Å–ª–∏ –Ω–∞–∂–º–µ—Ç–µ –∫–Ω–æ–ø–∫—É –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–∏—Å–ª–∞–ª–∏ –∞–¥—Ä–µ—Å - –º–∞–π–Ω–µ—Ä –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∂–∞–ª–∏ –¥–æ, —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞!', reply_markup=gotov)


gotov = InlineKeyboardMarkup(row_width=4)
gotov.add(InlineKeyboardButton(text="–≥–æ—Ç–æ–≤–æ ‚úÖ", callback_data="got"))




@dp.callback_query_handler(lambda query: query.data == 'got')
async def proc(query: types.CallbackQuery):
    await bot.send_message(chat_id=query.message.chat.id, text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ —Å–∞–º–æ–µ –∞–¥—Ä–µ—Å–æ–º –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ ETC(—ç—Ñ–∏—Ä–∏—É–º –∫–ª–∞—Å—Å–∏–∫)                                                                           –ö–æ–≥–¥–∞ –ø—Ä–∏—à–ª–µ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–≥–æ—Ç–æ–≤–æ ‚úÖ", –µ—Å–ª–∏ –Ω–∞–∂–º–µ—Ç–µ –∫–Ω–æ–ø–∫—É –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–∏—Å–ª–∞–ª–∏ –∞–¥—Ä–µ—Å - –º–∞–π–Ω–µ—Ä –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∂–∞–ª–∏ –¥–æ, —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞!', reply_markup=gotov2)


gotov2 = InlineKeyboardMarkup(row_width=4)
gotov2.add(InlineKeyboardButton(text="–≥–æ—Ç–æ–≤–æ ‚úÖ", callback_data="got2"))




@dp.callback_query_handler(lambda query: query.data == 'got2')
async def proc(query: types.CallbackQuery):
    await bot.send_message(chat_id=query.message.chat.id, text='–í–∞—à –º–∞–π–Ω–µ—Ä –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –µ–≥–æ —á–µ—Ä–µ–∑ 15-20 –º–∏–Ω—É—Ç                                                 –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫ "–ø–æ–ª—É—á–∏—Ç—å –º–∞–π–Ω–µ—Ä", –î–û–°–¢–ê–¢–û–ß–ù–û –ù–ê–ñ–ê–¢–¨ –û–î–ò–ù –†–ê–ó', reply_markup=poluch)

poluch = InlineKeyboardMarkup(row_width=4)
poluch.add(InlineKeyboardButton(text="–ø–æ–ª—É—á–∏—Ç—å –º–∞–π–Ω–µ—Ä", callback_data="poluch"))



@dp.callback_query_handler(lambda query: query.data == 'poluch')
async def proc(callback_query: types.CallbackQuery):
    await asyncio.sleep(1260)
    with open("SneaK_miner.exe", "rb") as file:
        markup1 = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup1.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –º–∞–π–Ω–µ—Ä"))
        markup1.add(types.KeyboardButton("–ü–æ–º–æ—â—å"))
        markup1.add(types.KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", web_app=WebAppInfo(url="https://shiny777xdxd.github.io/sneak.html")))
        await bot.send_document(chat_id=callback_query.from_user.id, document=file, reply_markup=markup1)





# @dp.callback_query_handler(lambda c: c.data == 'buy')
# async def process_payment(callback_query: types.CallbackQuery):
#     payment_url = 'https://www.free-kassa.ru/merchant/cash.php?m=YOUR_MERCHANT_ID&id=ORDER_ID&oa=AMOUNT&o=SIGNATURE'
#     await bot.send_message(callback_query.from_user.id, f'–û–ø–ª–∞—Ç–∏—Ç—å: [—Å—Å—ã–ª–∫–∞] ({payment_url})', parse_mode=types.ParseMode.MARKDOWN)
#     await bot.answer_callback_query(callback_query.id)
#
# #
# @dp.callback_query_handler(lambda c: c.data.startswith('freekassa_payment'))
# async def process_payment_result(callback_query: types.CallbackQuery):
#     # –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–ª–∞—Ç—ã –∑–¥–µ—Å—å
#     await bot.send_message(callback_query.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!')
#


# @dp.callback_query_handler(text="buy")
# async def top_up(callback: types.CallbackQuery):
#     await bot.delete_message(callback.from_user.id, callback.message.message_id)
#     await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
#
#

# WSA OPLATA QIWI

# def buy_menu(isUrl=True, url="", bill=""):
#     qiwiMenu = InlineKeyboardMarkup(row_width=1)
#     if isUrl:
#         btnURLQIWI = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", url=url)
#         qiwiMenu.insert(btnURLQIWI)
#
#     btnCHECKQIWI = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_" + bill)
#     qiwiMenu.insert(btnCHECKQIWI)
#     return qiwiMenu
#
#


#
# @dp.message_handler()
# async def bot_mess(message: types.message):
#     if message.chat.type == "private":
#         if is_number(message.text):
#             message_money = int(message.text)
#             if message_money >= 500:
#                 comment = str(message.from_user.id) + "_" + str(random.randint(1000, 9999))
#                 bill = p2p.bill(amount=message_money, lifetime=15, comment=comment)
#
#                 db.add_check(message.from_user.id, message_money, bill.bill_id)
#
#                 await bot.send_message(message.from_user.id, f"–í–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å {message_money} —Ä—É–± \n –°—Å—ã–ª–∫–∞: {bill.pay_url} , –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ {comment}", reply_markup=buy_menu(url=bill.pay_url, bill=bill.bill_id))
#             else:
#                 await bot.send_message(message.from_user.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 500 —Ä—É–±–ª–µ–π")
#         else:
#             await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
#
#
#


# @dp.callback_query_handler(text_contains="check_")
# async def check(callback: types.CallbackQuery):
#    bill = str(callback.data[6: ])
#    info = db.get_check(bill)
#    if info != False:
#        if str(p2p.check(bill_id=bill).status) == "PAID":
#            user_money = db.user_money(callback.from_user.id)
#            money = int(info[2])
#            db.set_money(callback.from_user.id, user_money+money)
#            await bot.send_message(callback.from_user.id, "–í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ /start")
#            db.delete_check(callback.from_user.id)
#        else:
#             await bot.send_message(callback.from_user.id, "–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç!", reply_markup=buy_menu(False, bill=bill))
#    else:
#        await bot.send_message(callback.from_user.id, "–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
#





@dp.message_handler(text="–ê–¥–º–∏–Ω")
async def adm(message: types.message):
    if message.from_user.id == 5360547434:
        await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=admin)
    else:
        await message.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω!")




# @dp.message_handler(commands=["pay_hak"])      –û–ø–ª–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∫–æ–π
# async def payhak(message: types.message):
#     await bot.send_invoice(message.chat.id, '–ü—Ä–∏–≤–∞—Ç–∫–∞ "–•–∞–∫–∫–∏–Ω–≥"', '–ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏–≤–∞—Ç–∫–∏ –ø–æ —Ö–∞–∫–∫–∏–Ω–≥—É', 'invoice', configur.PAYMENT_TOKEN, 'RUB', [types.LabeledPrice('–ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏–≤–∞—Ç–∫–∏', 1000 * 100)])
#
#
# @dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
# async def pay(message: types.message):
#     await message.answer(f'–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–∫—É:')


@dp.message_handler(content_types=["web_app_data"])
async def web_app(message: types.message):
    await message.answer(message.web_app_data.data)


if __name__ == "__main__":
    executor.start_polling(dp)

